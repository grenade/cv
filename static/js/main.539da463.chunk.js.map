{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","App_GistCv","React","Component","GistCv","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gist","files","config","sections","fetchData","bind","assertThisInitialized","_this2","fetch","GIST_API_URL","then","response","json","setState","JSON","parse","content","_this3","Container","Row","Col","sm","map","section","id","name","show_section_name","sort","direction","keys","filter","key","startsWith","filename_prefix","reverse","Card","body","react_markdown_default","source","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAUMA,mLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAD,aAHYC,IAAMC,WAYlBC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,CACJC,MAAO,IAETC,OAAQ,CACNC,SAAU,KAGdX,EAAKY,UAAYZ,EAAKY,UAAUC,KAAfZ,OAAAa,EAAA,EAAAb,CAAAD,IAVAA,mFAcjBG,KAAKS,gDAGK,IAAAG,EAAAZ,KACVa,MAAMC,iEACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAV,GAAI,OAAIO,EAAKM,SAAS,CAAEb,KAAMA,EAAME,OAAQY,KAAKC,MAAMf,EAAKC,MAvB7C,kBAuByEe,8CAGzF,IAAAC,EAAAtB,KACP,OACEX,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAKC,GAAI,GAEL1B,KAAKI,MAAMG,OAAOC,SAASmB,IAAI,SAACC,GAAD,OAE7BvC,EAAAC,EAAAC,cAAA,OAAKsC,GAAID,EAAQE,MACbF,EAAQG,kBAAqB1C,EAAAC,EAAAC,cAAA,UAAKqC,EAAQE,MAAa,MAErDF,EAAQI,MAAsC,MAA9BJ,EAAQI,KAAKC,UAAU,GACrCnC,OAAOoC,KAAKZ,EAAKlB,MAAMC,KAAKC,OAAO6B,OAAO,SAAAC,GAAG,OAAIA,EAAIC,WAAWT,EAAQU,mBAAkBC,UAC1FzC,OAAOoC,KAAKZ,EAAKlB,MAAMC,KAAKC,OAAO6B,OAAO,SAAAC,GAAG,OAAIA,EAAIC,WAAWT,EAAQU,oBAAmBX,IAAI,SAAAS,GACjG,OAAIR,EAAQG,kBAER1C,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAMC,MAAI,GACRpD,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAeqD,OAAQrB,EAAKlB,MAAMC,KAAKC,MAAM8B,GAAKf,QAASe,IAAKA,KAKlE/C,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAeqD,OAAQrB,EAAKlB,MAAMC,KAAKC,MAAM8B,GAAKf,QAASe,IAAKA,UAShF/C,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAKC,GAAI,GACPrC,EAAAC,EAAAC,cAAA,UAEES,KAAKI,MAAMG,OAAOC,SAASmB,IAAI,SAACC,GAAD,OAC7BvC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGqD,KAAM,IAAMhB,EAAQE,MAAOF,EAAQE,oBA3DrCrC,IAAMC,WAsEZN,IChFKyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.539da463.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {\n  Container,\n  Row,\n  Col,\n  Card\n} from 'react-bootstrap'\nimport ReactMarkdown from 'react-markdown';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <GistCv />\n    );\n  }\n}\n\nvar GIST_ID = '8e487477663c8e57c7bf31e8371f454a';\nvar GIST_API_URL = 'https://api.github.com/gists';\nvar GIST_CONFIG_FILENAME = 'cv-config.json';\n\nclass GistCv extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gist: {\n        files: {}\n      },\n      config: {\n        sections: []\n      }\n    };\n    this.fetchData = this.fetchData.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    fetch(GIST_API_URL + '/' + GIST_ID)\n      .then(response => response.json())\n      .then(gist => this.setState({ gist: gist, config: JSON.parse(gist.files[GIST_CONFIG_FILENAME].content) }));\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col sm={9}>\n            {\n              this.state.config.sections.map((section) =>\n\n                <div id={section.name}>\n                  {(section.show_section_name) ? <h2>{section.name}</h2> : null}\n                  {\n                    ((section.sort && section.sort.direction[0] === 'd')\n                      ? Object.keys(this.state.gist.files).filter(key => key.startsWith(section.filename_prefix)).reverse()\n                      : Object.keys(this.state.gist.files).filter(key => key.startsWith(section.filename_prefix))).map(key => {\n                      if (section.show_section_name) {\n                        return (\n                          <Card body>\n                            <ReactMarkdown source={this.state.gist.files[key].content} key={key} />\n                          </Card>\n                        );\n                      } else {\n                        return (\n                          <ReactMarkdown source={this.state.gist.files[key].content} key={key} />\n                        )\n                      }\n                    })\n                  }\n                </div>\n              )\n            }\n          </Col>\n          <Col sm={3}>\n            <ul>\n            {\n              this.state.config.sections.map((section) =>\n                <li><a href={'#' + section.name}>{section.name}</a></li>\n              )\n            }\n            </ul>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}